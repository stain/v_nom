/* ***** BEGIN LICENSE BLOCK *****
* Version: CDDL 1.0/LGPL 2.1
*
* The contents of this file are subject to the COMMON DEVELOPMENT AND
* DISTRIBUTION LICENSE (CDDL) Version 1.0 (the "License"); you may not use
* this file except in compliance with the License. You may obtain a copy of
* the License at http://www.sun.com/cddl/
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
* for the specific language governing rights and limitations under the
* License.
*
* The Original Code is "NOM" Netlabs Object Model
*
* The Initial Developer of the Original Code is
* netlabs.org: Chris Wohlgemuth <cinc-ml@netlabs.org>.
* Portions created by the Initial Developer are Copyright (C) 2005-2006
* the Initial Developer. All Rights Reserved.
*
* Contributor(s):
*
* Alternatively, the contents of this file may be used under the terms of
* the GNU Lesser General Public License Version 2.1 (the "LGPL"), in which
* case the provisions of the LGPL are applicable instead of those above. If
* you wish to allow use of your version of this file only under the terms of
* the LGPL, and not to allow others to use your version of this file under
* the terms of the CDDL, indicate your decision by deleting the provisions
* above and replace them with the notice and other provisions required by the
* LGPL. If you do not delete the provisions above, a recipient may use your
* version of this file under the terms of any one of the CDDL or the LGPL.
*
* ***** END LICENSE BLOCK ***** */
#ifndef NOMOBJ_IDL_INCLUDED
#define NOMOBJ_IDL_INCLUDED

#include "nombase.idl"

//NOMCLASSNAME(NOMObject);

interface NOMObject
{

  NOMCLASSVERSION(1, 0 );

  /**
     This method is intended to be overriden by classes which need some initialization.

     \par How to override
     The parent class must always be called first when overriden.

     \sa impl_NOMObject_nomInit()
   */
  void nomInit();

  /**
     This method is intended to be overriden by classes which need some uninitialization.
     Note that when overriding the method the garbage collector will add the object
     to the list of objects with a finalizer. The finalizer will be run when the object is
     collected and calls nomUnInit() to give the object a chance for cleanup. 

     \note It's not necessary to free memory in nomUnInit(). This is the job of the garbage collector.
     Only system resources like file handles etc. must be explicitely freed.

     \par How to override
     The parent method must be called after doing the own processing.

     \sa impl_NOMObject_nomUnInit()
   */
  void nomUnInit();

  /** 
     Return the size of the object. That is sizeof(mTab*)+sizeof(all instance vars)

     \par How to override
     This method is usually not overriden.

     \sa impl_NOMObject_nomGetSize()
  */
  long nomGetSize();

  /**
     This method calls nomUnInit() to give the object a chance of freeing system resources.
     Afterwards the memory occupied by the object is given back to the system and the
     object is not accessible anymore.

     \sa impl_NOMObject_delete()
   */
  void delete();

  /**
     This method returns a pointer to the class object of this object.

     \par How to override
     This method is usually not overriden.

     \return Pointer to the class object

     \sa impl_NOMObject_nomGetClass()
   */
  PNOMClass nomGetClass();

  /**
     Create a new class of the kind the caller is. This method ensures that subclasses
     are properly handled without the need to override this method in every subclass.

     This method will get the class object of nomSelf and call nomNew() on it creating
     a new object which has exactly the same class hierarchy of nomSelf.

     \par How to override
     This method is usually not overriden.

     \return Pointer to a new object of the same kind as nomSelf. Note that this won't
     create an exact copy but a completely new objecct.

     \sa impl_NOMObject_new()
   */
  PNOMObject new();
};

#endif /* NOMOBJ_IDL_INCLUDED */
